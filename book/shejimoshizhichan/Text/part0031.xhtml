<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_37">7.4 单例模式的扩展</h3>

  <p class="ziti">如果一个类可以产生多个对象，对象的数量不受限制，则是非常容易实现的，直接使用new关键字就可以了，如果只需要一个对象，使用单例模式就可以了，但是如果要求一个类只能产生两三个对象呢？该怎么实现？我们还以皇帝为例来说明。</p>

  <p class="ziti">一般情况下，一个朝代的同一个时代只有一个皇帝，那有没有出现两个皇帝的情况呢？确实有，就出现在明朝，那三国期间的算不算？不算，各自称帝，各有各的地盘，国号不同。大家还记得《石灰吟》这首诗吗？作者是谁？于谦。他是被谁杀死的？明英宗朱祁镇。对，就是那个在土木堡之变中被瓦剌俘虏的皇帝，被俘虏后，他弟弟朱祁钰当上了皇帝，就是明景帝，估计刚当上皇帝乐疯了，忘记把他哥哥朱祁镇升级为太上皇，在那个时期就出现了两个皇帝，这期间的大臣是非常郁闷的，为什么呀？因为可能出现今天参拜的皇帝和昨天的皇帝不相同，昨天给那个皇帝汇报，今天还要给这个皇帝汇报一遍，该情况的类图如图7-3所示。</p>

  <p class="pic"><img alt="" src="../Images/image00387.jpeg"/></p>

  <p class="middle-img">图7-3 多个皇帝类图</p>

  <p class="ziti">这个类图看起来还算简单，但是实现就有点复杂了。Emperor类如代码清单7-5所示。</p>

  <p class="ziti">代码清单7-5 固定数量的皇帝类</p>
  <pre>public class Emperor {
     //定义最多能产生的实例数量
     private static int maxNumOfEmperor = 2;    
     //每个皇帝都有名字，使用一个ArrayList来容纳，每个对象的私有属性
     private static ArrayList&lt;String&gt; nameList=new ArrayList&lt;String&gt;(); 
     //定义一个列表，容纳所有的皇帝实例
     private static ArrayList&lt;Emperor&gt; emperorList=new ArrayList&lt;Emperor&gt;();
     //当前皇帝序列号
     private static int countNumOfEmperor =0;   
     //产生所有的对象
     static{
             for(int i=0;i&lt;maxNumOfEmperor;i++){  
                     emperorList.add(new Emperor("皇"+(i+1)+"帝"));
             }
     }
     private Emperor(){
             //世俗和道德约束你，目的就是不产生第二个皇帝
     }  
     //传入皇帝名称，建立一个皇帝对象
     private Emperor(String name){
             nameList.add(name);
     }  
     //随机获得一个皇帝对象
     public static Emperor getInstance(){
             Random random = new Random();
             //随机拉出一个皇帝，只要是个精神领袖就成
             countNumOfEmperor = random.nextInt(maxNumOfEmperor);
             return emperorList.get(countNumOfEmperor);         
     }
     //皇帝发话了
     public static void say(){
             System.out.println(nameList.get(countNumOfEmperor));               
     }
}</pre>

  <p class="ziti">在Emperor中使用了两个ArrayList分别存储实例和实例变量。当然，如果考虑到线程安全问题可以使用Vector来代替。臣子参拜皇帝的过程如代码清单7-6所示。</p>

  <p class="ziti">代码清单7-6 臣子参拜皇帝的过程</p>
  <pre>public class Minister {
     public static void main(String[] args) {
             //定义5个大臣
             int ministerNum =5;                
             for(int i=0;i&lt;ministerNum;i++){
                     Emperor emperor = Emperor.getInstance();
                     System.out.print("第"+(i+1)+"个大臣参拜的是：");
                     emperor.say();
             }
     }
}</pre>

  <p class="ziti">大臣参拜皇帝的结果如下所示。</p>

  <p class="ziti5">第1个大臣参拜的是：皇1帝</p>

  <p class="ziti5">第2个大臣参拜的是：皇2帝</p>

  <p class="ziti5">第3个大臣参拜的是：皇1帝</p>

  <p class="ziti5">第4个大臣参拜的是：皇1帝</p>

  <p class="ziti5">第5个大臣参拜的是：皇2帝</p>

  <p class="ziti">看，果然每个大臣参拜的皇帝都可能不一样，大臣们就开始糊涂了，A大臣给皇1帝汇报了一件事情，皇2帝不知道，然后就开始怀疑大臣A是皇1帝的亲信，然后就想办法开始整……</p>

  <p class="ziti">这种需要产生固定数量对象的模式就叫做有上限的多例模式，它是单例模式的一种扩展，采用有上限的多例模式，我们可以在设计时决定在内存中有多少个实例，方便系统进行扩展，修正单例可能存在的性能问题，提供系统的响应速度。例如读取文件，我们可以在系统启动时完成初始化工作，在内存中启动固定数量的reader实例，然后在需要读取文件时就可以快速响应。</p>
</body></html>