<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_47">9.2 抽象工厂模式的定义</h3>

  <p class="ziti">抽象工厂模式（Abstract Factory Pattern）是一种比较常用的模式，其定义如下：</p>

  <p class="ziti">Provide an interface for creating families of related or dependent objects without specifying their concrete classes.（为创建一组相关或相互依赖的对象提供一个接口，而且无须指定它们的具体类。）</p>

  <p class="ziti">抽象工厂模式的通用类图如图9-3所示。</p>

  <p class="pic"><img alt="" src="../Images/image00396.jpeg"/></p>

  <p class="middle-img">图9-3 抽象工厂模式的通用类图</p>

  <p class="ziti">抽象工厂模式是工厂方法模式的升级版本，在有多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式。我们来看看抽象工厂的通用源代码，首先有两个互相影响的产品线（也叫做产品族），例如制造汽车的左侧门和右侧门，这两个应该是数量相等的——两个对象之间的约束，每个型号的车门都是不一样的，这是产品等级结构约束的，我们先看看两个产品族的类图，如图9-4所示。</p>

  <p class="pic"><img alt="" src="../Images/image00397.jpeg"/></p>

  <p class="middle-img">图9-4 抽象工厂模式的通用源码类图</p>

  <p class="ziti">注意类图上的圈圈、框框相对应，两个抽象的产品类可以有关系，例如共同继承或实现一个抽象类或接口，其源代码如代码清单9-11所示。</p>

  <p class="ziti">代码清单9-11 抽象产品类</p>
  <pre>public abstract class AbstractProductA {   
     //每个产品共有的方法
     public void shareMethod(){
     }
     //每个产品相同方法，不同实现
     public abstract void doSomething();
}</pre>

  <p class="ziti">两个具体的产品实现类如代码清单9-12、代码清单9-13所示。</p>

  <p class="ziti">代码清单9-12 产品A1的实现类</p>
  <pre>public class ProductA1 extends AbstractProductA {
     public void doSomething() {
             System.out.println("产品A1的实现方法");
     }
}</pre>

  <p class="ziti">代码清单9-13 产品A2的实现类</p>
  <pre>public class ProductA2 extends AbstractProductA {
     public void doSomething() {
             System.out.println("产品A2的实现方法");
     }
}</pre>

  <p class="ziti">产品B与此类似，不再赘述。抽象工厂类AbstractCreator的职责是定义每个工厂要实现的功能，在通用代码中，抽象工厂类定义了两个产品族的产品创建，如代码清单9-14所示。</p>

  <p class="ziti">代码清单9-14 抽象工厂类</p>
  <pre>public abstract class AbstractCreator {
     //创建A产品家族
     public abstract AbstractProductA createProductA(); 
     //创建B产品家族
     public abstract AbstractProductB createProductB();
}</pre>
  <hr/>

  <p class="ziti6"><span class="yanse">注意</span>　有N个产品族，在抽象工厂类中就应该有N个创建方法。</p>
  <hr/>

  <p class="ziti">如何创建一个产品，则是由具体的实现类来完成的，Creator1和Creator2如代码清单9-15和代码清单9-16所示。</p>

  <p class="ziti">代码清单9-15 产品等级1的实现类</p>
  <pre>public class Creator1 extends AbstractCreator {    
     //只生产产品等级为1的A产品
     public AbstractProductA createProductA() { 
             return new ProductA1();
     }
     //只生产产品等级为1的B产品
     public AbstractProductB createProductB() {
             return new ProductB1();
     }
}</pre>

  <p class="ziti">代码清单9-16 产品等级2的实现类</p>
  <pre>public class Creator2 extends AbstractCreator {    
     //只生产产品等级为2的A产品
     public AbstractProductA createProductA() { 
             return new ProductA2();
     }
     //只生产产品等级为2的B产品
     public AbstractProductB createProductB() {
             return new ProductB2();
     }
}</pre>
  <hr/>

  <p class="ziti6"><span class="yanse">注意</span>　有M个产品等级就应该有M个实现工厂类，在每个实现工厂中，实现不同产品族的生产任务。</p>
  <hr/>

  <p class="ziti">在具体的业务中如何产生一个与实现无关的对象呢？如代码清单9-17所示。</p>

  <p class="ziti">代码清单9-17 场景类</p>
  <pre>public class Client {
     public static void main(String[] args) {
             //定义出两个工厂
             AbstractCreator creator1 = new Creator1();
             AbstractCreator creator2 = new Creator2();
             //产生A1对象
             AbstractProductA a1 =  creator1.createProductA();
             //产生A2对象
             AbstractProductA a2 = creator2.createProductA();
             //产生B1对象
             AbstractProductB b1 = creator1.createProductB();
             //产生B2对象
             AbstractProductB b2 = creator2.createProductB();
             /*
              * 然后在这里就可以为所欲为了...
              */
     }
}</pre>

  <p class="ziti">在场景类中，没有任何一个方法与实现类有关系，对于一个产品来说，我们只要知道它的工厂方法就可以直接产生一个产品对象，无须关心它的实现类。</p>
</body></html>