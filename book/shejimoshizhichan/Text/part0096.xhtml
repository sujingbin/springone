<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_116">21.3 组合模式的应用</h3>

  <h4 class="p4 sigil_not_in_toc">21.3.1 组合模式的优点</h4>

  <p class="ziti">● 高层模块调用简单</p>

  <p class="ziti">一棵树形机构中的所有节点都是Component，局部和整体对调用者来说没有任何区别，也就是说，高层模块不必关心自己处理的是单个对象还是整个组合结构，简化了高层模块的代码。</p>

  <p class="ziti">● 节点自由增加</p>

  <p class="ziti">使用了组合模式后，我们可以看看，如果想增加一个树枝节点、树叶节点是不是都很容易，只要找到它的父节点就成，非常容易扩展，符合开闭原则，对以后的维护非常有利。</p>

  <h4 class="p4 sigil_not_in_toc">21.3.2 组合模式的缺点</h4>

  <p class="ziti">组合模式有一个非常明显的缺点，看到我们在场景类中的定义，提到树叶和树枝使用时的定义了吗？直接使用了实现类！这在面向接口编程上是很不恰当的，与依赖倒置原则冲突，读者在使用的时候要考虑清楚，它限制了你接口的影响范围。</p>

  <h4 class="p4 sigil_not_in_toc">21.3.3 组合模式的使用场景</h4>

  <p class="ziti">● 维护和展示部分-整体关系的场景，如树形菜单、文件和文件夹管理。</p>

  <p class="ziti">● 从一个整体中能够独立出部分模块或功能的场景。</p>

  <h4 class="p4 sigil_not_in_toc">21.3.4 组合模式的注意事项</h4>

  <p class="ziti">只要是树形结构，就要考虑使用组合模式，这个一定要记住，只要是要体现局部和整体的关系的时候，而且这种关系还可能比较深，考虑一下组合模式吧。</p>
</body></html>