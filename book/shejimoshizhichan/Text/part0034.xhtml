<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_41">8.2 工厂方法模式的定义</h3>

  <p class="ziti">工厂方法模式使用的频率非常高，在我们日常的开发中总能见到它的身影。其定义为：</p>

  <p class="ziti">Define an interface for creating an object,but let subclasses decide which class to instantiate.Factory Method lets a class defer instantiation to subclasses.（定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。）</p>

  <p class="ziti">工厂方法模式的通用类图如图8-2所示。</p>

  <p class="pic"><img alt="" src="../Images/image00389.jpeg"/></p>

  <p class="middle-img">图8-2 工厂方法模式通用类图</p>

  <p class="ziti">在工厂方法模式中，抽象产品类Product负责定义产品的共性，实现对事物最抽象的定义；Creator为抽象创建类，也就是抽象工厂，具体如何创建产品类是由具体的实现工厂ConcreteCreator完成的。工厂方法模式的变种较多，我们来看一个比较实用的通用源码。</p>

  <p class="ziti">抽象产品类代码如代码清单8-8所示。</p>

  <p class="ziti">代码清单8-8 抽象产品类</p>
  <pre>public abstract class Product {    
     //产品类的公共方法
     public void method1(){
             //业务逻辑处理
     }  
     //抽象方法
     public abstract void method2();    
}</pre>

  <p class="ziti">具体的产品类可以有多个，都继承于抽象产品类，其源代码如代码清单8-9所示。</p>

  <p class="ziti">代码清单8-9 具体产品类</p>
  <pre>public class ConcreteProduct1 extends Product {
     public void method2() {
             //业务逻辑处理
     }
}
public class ConcreteProduct2 extends Product {
     public void method2() {
             //业务逻辑处理
     }
}</pre>

  <p class="ziti">抽象工厂类负责定义产品对象的产生，源代码如代码清单8-10所示。</p>

  <p class="ziti">代码清单8-10 抽象工厂类</p>
  <pre>public abstract class Creator {    
     /*
      * 创建一个产品对象，其输入参数类型可以自行设置
      * 通常为String、Enum、Class等，当然也可以为空
      */        
     public abstract &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; c);
}</pre>

  <p class="ziti">具体如何产生一个产品的对象，是由具体的工厂类实现的，如代码清单8-11所示。</p>

  <p class="ziti">代码清单8-11 具体工厂类</p>
  <pre>public class ConcreteCreator extends Creator {     
     public &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; c){
             Product product=null;
             try {
                    product = (Product)Class.forName(c.getName()).newInstance();
             } catch (Exception e) {
                    //异常处理
             }
             return (T)product;         
     }
}</pre>

  <p class="ziti">场景类的调用方法如代码清单8-12所示。</p>

  <p class="ziti">代码清单8-12 场景类</p>
  <pre>public class Client {
     public static void main(String[] args) {
             Creator creator = new ConcreteCreator();
             Product product = creator.createProduct(ConcreteProduct1.class);
             /*
              * 继续业务处理
              */
     }
}</pre>

  <p class="ziti">该通用代码是一个比较实用、易扩展的框架，读者可以根据实际项目需要进行扩展。</p>
</body></html>