<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_52">10.2 模板方法模式的定义</h3>

  <p class="ziti">模板方法模式（Template Method Pattern）是如此简单，以致让你感觉你已经能够掌握其精髓了。其定义如下：</p>

  <p class="ziti">Define the skeleton of an algorithm in an operation,deferring some steps to subclasses.Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.（定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。）</p>

  <p class="ziti">模板方法模式的通用类图如图10-3所示。</p>

  <p class="pic"><img alt="" src="../Images/image00400.jpeg"/></p>

  <p class="middle-img">图10-3 修改后的悍马车模类图</p>

  <p class="ziti">模板方法模式确实非常简单，仅仅使用了Java的继承机制，但它是一个应用非常广泛的模式。其中，AbstractClass叫做抽象模板，它的方法分为两类：</p>

  <p class="ziti">● 基本方法</p>

  <p class="ziti">基本方法也叫做基本操作，是由子类实现的方法，并且在模板方法被调用。</p>

  <p class="ziti">● 模板方法</p>

  <p class="ziti">可以有一个或几个，一般是一个具体方法，也就是一个框架，实现对基本方法的调度，完成固定的逻辑。</p>
  <hr/>

  <p class="ziti6"><span class="yanse">注意</span>　为了防止恶意的操作，一般模板方法都加上final关键字，不允许被覆写。</p>
  <hr/>

  <p class="ziti">在类图中还有一个角色：具体模板。ConcreteClass1和ConcreteClass2属于具体模板，实现父类所定义的一个或多个抽象方法，也就是父类定义的基本方法在子类中得以实现。</p>

  <p class="ziti">我们来看其通用代码，AbstractClass如代码清单10-6所示。</p>

  <p class="ziti">代码清单10-6 抽象模板类</p>
  <pre>public abstract class AbstractClass {
     //基本方法
     protected abstract void doSomething();
     //基本方法
     protected abstract void doAnything();
     //模板方法
     public void templateMethod(){
             /*
              * 调用基本方法，完成相关的逻辑
              */
             this.doAnything();
             this.doSomething();
     }
}</pre>

  <p class="ziti">具体模板如代码清单10-7所示。</p>

  <p class="ziti">代码清单10-7 具体模板类</p>
  <pre>public class ConcreteClass1 extends AbstractClass {
     //实现基本方法
     protected void doAnything() {
             //业务逻辑处理
     }
     protected void doSomething() {
             //业务逻辑处理
     }
}
public class ConcreteClass2 extends AbstractClass {
     //实现基本方法
     protected void doAnything() {
             //业务逻辑处理
     }
     protected void doSomething() {
             //业务逻辑处理
     }
}</pre>

  <p class="ziti">场景类如代码清单10-8所示。</p>

  <p class="ziti">代码清单10-8 场景类</p>
  <pre>public class Client {
     public static void main(String[] args) {
             AbstractClass class1 = new ConcreteClass1();
             AbstractClass class2 = new ConcreteClass2();               
             //调用模板方法
             class1.templateMethod();
             class2.templateMethod();
     }
}</pre>
  <hr/>

  <p class="ziti6"><span class="yanse">注意</span>　抽象模板中的基本方法尽量设计为protected类型，符合迪米特法则，不需要暴露的属性或方法尽量不要设置为protected类型。实现类若非必要，尽量不要扩大父类中的访问权限。</p>
  <hr/>
</body></html>