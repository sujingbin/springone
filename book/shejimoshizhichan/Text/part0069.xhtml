<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_83">15.3 命令模式的应用</h3>

  <h4 class="p4 sigil_not_in_toc">15.3.1 命令模式的优点</h4>

  <p class="ziti">● 类间解耦</p>

  <p class="ziti">调用者角色与接收者角色之间没有任何依赖关系，调用者实现功能时只需调用Command抽象类的execute方法就可以，不需要了解到底是哪个接收者执行。</p>

  <p class="ziti">● 可扩展性</p>

  <p class="ziti">Command的子类可以非常容易地扩展，而调用者Invoker和高层次的模块Client不产生严重的代码耦合。</p>

  <p class="ziti">● 命令模式结合其他模式会更优秀</p>

  <p class="ziti">命令模式可以结合责任链模式，实现命令族解析任务；结合模板方法模式，则可以减少Command子类的膨胀问题。</p>

  <h4 class="p4 sigil_not_in_toc">15.3.2 命令模式的缺点</h4>

  <p class="ziti">命令模式也是有缺点的，请看Command的子类：如果有N个命令，问题就出来了，Command的子类就可不是几个，而是N个，这个类膨胀得非常大，这个就需要读者在项目中慎重考虑使用。</p>

  <h4 class="p4 sigil_not_in_toc">15.3.3 命令模式的使用场景</h4>

  <p class="ziti">只要你认为是命令的地方就可以采用命令模式，例如，在GUI开发中，一个按钮的点击是一个命令，可以采用命令模式；模拟DOS命令的时候，当然也要采用命令模式；触发－反馈机制的处理等。</p>
</body></html>