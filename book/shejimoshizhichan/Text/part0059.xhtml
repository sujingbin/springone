<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_71">13.3 原型模式的应用</h3>

  <h4 class="p4 sigil_not_in_toc">13.3.1 原型模式的优点</h4>

  <p class="ziti">● 性能优良</p>

  <p class="ziti">原型模式是在内存二进制流的拷贝，要比直接new一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</p>

  <p class="ziti">● 逃避构造函数的约束</p>

  <p class="ziti">这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的（参见13.4节）。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。</p>

  <h4 class="p4 sigil_not_in_toc">13.3.2 原型模式的使用场景</h4>

  <p class="ziti">● 资源优化场景</p>

  <p class="ziti">类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。</p>

  <p class="ziti">● 性能和安全要求的场景</p>

  <p class="ziti">通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</p>

  <p class="ziti">● 一个对象多个修改者的场景</p>

  <p class="ziti">一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。</p>

  <p class="ziti">在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与Java融为一体，大家可以随手拿来使用。</p>
</body></html>