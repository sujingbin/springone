<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_156">28.3 享元模式的应用</h3>

  <h4 class="p4 sigil_not_in_toc">28.3.1 享元模式的优点和缺点</h4>

  <p class="ziti">享元模式是一个非常简单的模式，它可以大大减少应用程序创建的对象，降低程序内存的占用，增强程序的性能，但它同时也提高了系统复杂性，需要分离出外部状态和内部状态，而且外部状态具有固化特性，不应该随内部状态改变而改变，否则导致系统的逻辑混乱。</p>

  <h4 class="p4 sigil_not_in_toc">28.3.2 享元模式的使用场景</h4>

  <p class="ziti">在如下场景中则可以选择使用享元模式。</p>

  <p class="ziti">● 系统中存在大量的相似对象。</p>

  <p class="ziti">● 细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是说对象没有特定身份。</p>

  <p class="ziti">● 需要缓冲池的场景。</p>
</body></html>