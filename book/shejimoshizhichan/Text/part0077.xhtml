<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.250rem;"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h3 class="p3" id="sigil_toc_id_93">17.2 装饰模式的定义</h3>

  <p class="ziti">装饰模式（Decorator Pattern）是一种比较常见的模式，其定义如下：Attach additional responsibilities to an object dynamically keeping the same interface.Decorators provide a flexible alternative to subclassing for extending functionality.（动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。）</p>

  <p class="ziti">装饰模式的通用类图如图17-5所示。</p>

  <p class="pix"><img alt="" src="../Images/image00438.jpeg"/></p>

  <p class="middle-img">图17-5 装饰模式的通用类图</p>

  <p class="ziti">在类图中，有四个角色需要说明：</p>

  <p class="ziti">● Component抽象构件</p>

  <p class="ziti">Component是一个接口或者是抽象类，就是定义我们最核心的对象，也就是最原始的对象，如上面的成绩单。</p>
  <hr/>

  <p class="ziti6"><span class="yanse">注意</span>　在装饰模式中，必然有一个最基本、最核心、最原始的接口或抽象类充当Component抽象构件。</p>
  <hr/>

  <p class="ziti">● ConcreteComponent 具体构件</p>

  <p class="ziti">ConcreteComponent是最核心、最原始、最基本的接口或抽象类的实现，你要装饰的就是它。</p>

  <p class="ziti">● Decorator装饰角色</p>

  <p class="ziti">一般是一个抽象类，做什么用呢？实现接口或者抽象方法，它里面可不一定有抽象的方法呀，在它的属性里必然有一个private变量指向Component抽象构件。</p>

  <p class="ziti">● 具体装饰角色</p>

  <p class="ziti">ConcreteDecoratorA和ConcreteDecoratorB是两个具体的装饰类，你要把你最核心的、最原始的、最基本的东西装饰成其他东西，上面的例子就是把一个比较平庸的成绩单装饰成家长认可的成绩单。</p>

  <p class="ziti">装饰模式的所有角色都已经解释完毕，我们来看看如何实现，先看抽象构件，如代码清单17-10所示。</p>

  <p class="ziti">代码清单17-10 抽象构件</p>
  <pre>public abstract class Component {
     //抽象的方法
     public abstract void operate();
}</pre>

  <p class="ziti">具体构件如代码清单17-11所示。</p>

  <p class="ziti">代码清单17-11 具体构件</p>
  <pre>public class ConcreteComponent extends Component {
     //具体实现
     @Override
     public void operate() {
             System.out.println("do Something");
     }
}</pre>

  <p class="ziti">装饰角色通常是一个抽象类，如代码清单17-12所示。</p>

  <p class="ziti">代码清单17-12 抽象装饰者</p>
  <pre>public abstract class Decorator extends Component {
     private Component component = null;        
     //通过构造函数传递被修饰者
     public Decorator(Component _component){
             this.component = _component;
     }
     //委托给被修饰者执行
     @Override
     public void operate() {
             this.component.operate();
     }
}</pre>

  <p class="ziti">当然了，若只有一个装饰类，则可以没有抽象装饰角色，直接实现具体的装饰角色即可。具体的装饰类如代码清单17-13所示。</p>

  <p class="ziti">代码清单17-13 具体的装饰类</p>
  <pre>public class ConcreteDecorator1 extends Decorator {
     //定义被修饰者
     public ConcreteDecorator1(Component _component){
             super(_component);
     }
     //定义自己的修饰方法
     private void method1(){
             System.out.println("method1 修饰");
     }
     //重写父类的Operation方法
     public void operate(){
             this.method1();
             super.operate();
     }
}
public class ConcreteDecorator2 extends Decorator {
     //定义被修饰者
     public ConcreteDecorator2(Component _component){
             super(_component);
     }
     //定义自己的修饰方法
     private void method2(){
             System.out.println("method2修饰");
     }
     //重写父类的Operation方法
     public void operate(){
             super.operate();
             this.method2();
     }
}</pre>
  <hr/>

  <p class="ziti6"><span class="yanse">注意</span>　原始方法和装饰方法的执行顺序在具体的装饰类是固定的，可以通过方法重载实现多种执行顺序。</p>
  <hr/>

  <p class="ziti">我们通过Client类来模拟高层模块的耦合关系，看看装饰模式是如何运行的，如代码清单17-14所示。</p>

  <p class="ziti">代码清单17-14 场景类</p>
  <pre>public class Client {
     public static void main(String[] args) {
             Component component = new ConcreteComponent();
             //第一次修饰
             component = new ConcreteDecorator1(component);
             //第二次修饰
             component = new ConcreteDecorator2(component);
             //修饰后运行
             component.operate();
     }
}</pre>
</body></html>